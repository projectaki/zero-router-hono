name: zrh

services:
  api:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_URL=${AUTH_URL}
      - API_URL=${API_URL}
      - APP_URL=${APP_URL}
      - ZERO_AUTH_SECRET=${ZERO_AUTH_SECRET}
    depends_on:
      db:
        condition: service_healthy
  auth:
    build:
      context: ..
      dockerfile: apps/auth/Dockerfile
    ports:
      - "3005:3005"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_PERSIST_PATH=${AUTH_PERSIST_PATH}
    volumes:
      - auth-data:/app/data
    depends_on:
      db:
        condition: service_healthy
  zero:
    image: rocicorp/zero:0.11.2025011402-73df1d
    ports:
      - "4848:4848"
    environment:
      - ZERO_UPSTREAM_DB=${ZERO_UPSTREAM_DB}
      - ZERO_CVR_DB=${ZERO_CVR_DB}
      - ZERO_CHANGE_DB=${ZERO_CHANGE_DB}
      - ZERO_AUTH_SECRET=${ZERO_AUTH_SECRET}
      - ZERO_REPLICA_FILE=${ZERO_REPLICA_FILE}
      - ZERO_SCHEMA_FILE=./zero-schema.json
    volumes:
      - ./zero-schema.json:/opt/app/zero-schema.json
      - zero-replica:/var/zero
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:16.2-alpine
    shm_size: 1g
    user: postgres
    restart: always
    healthcheck:
      test: 'pg_isready -U user --dbname=postgres'
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 54322:${POSTGRES_PORT}
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: |
      postgres 
      -c wal_level=logical
      -c max_wal_senders=10 
      -c max_replication_slots=5 
      -c hot_standby=on 
      -c hot_standby_feedback=on
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./seed.sql:/docker-entrypoint-initdb.d/seed.sql

volumes:
  postgres-data:
  zero-replica:
  auth-data:
